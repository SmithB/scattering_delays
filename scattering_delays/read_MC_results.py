import numpy as np
import glob
def read_MC_results(thedir, N_MC, max_files=np.Inf, filter_fn=None, filter_args=None, τ=None):
    '''
    Read monte-carlo results generated by small_mc_dist_depth

    Parameters
    ----------
    thedir : str
        Directory in which to find the mc output files.
    N_MC : numeric
        number of photons launched.
    filter_fn : function, optional
        a function that will be applied to the reshaped (Nx10) monte-carlo
        output before the results are binned. The default is None.
    filter_args : dict, optional
        dictionary of keyword args to pass to filter_fn
    τ : float
        optical thickness of the layer

    Returns
    -------
    D_MC : dict
        Dictionary containing entries:
            la: bin start
            lb: bin end
            lc: bin center
            E: fraction of transmitted photons in each bin.
            norm : factor converting counts to E (divide by this to recover counts)
    '''
    D_MC={}
    # load in the MC results, calculate P as a function of L
    # bin edges, gives power up to L ~ 1450
    hist_edges=np.cumsum(np.concatenate([[0], np.logspace(-2, 1, 1000)]))

    D_MC['la']=hist_edges[0:-1]
    D_MC['lb']=hist_edges[1:]
    D_MC['lc']=0.5*(D_MC['la']+D_MC['lb']);
    D_MC['E']=np.zeros_like(D_MC['la'])
    files=glob.glob(thedir+'/*.dat')
    files=files[0:np.minimum(len(files), max_files)]
    for file in files:
        D=np.fromfile(file, count=-1)
        D=D.reshape(int(len(D)/10), 10)
        if filter_fn is not None:
            D=filter_fn(D, **filter_args)
        if τ is not None:
            D=D[D[:,7]<τ,:]
        counts, _ = np.histogram(D[D[:,2]<10, 6], hist_edges)
        D_MC['E'] += counts/N_MC/len(files)
    D_MC['norm']=1/N_MC/len(files)
    return D_MC
